
#ifndef _GLCOMMON_H_
#define _GLCOMMON_H_

#include <windows.h>
#include <gl/gl.h>
#include <gl/glu.h>
#include "BaseLib/Common.h"
#include "BaseLib/Types.h"

#include "Extensions/h_glext.h"

#pragma comment(lib, "opengl32.lib")
#pragma comment(lib, "glu32.lib")

#define GL_ERROR_CHECKING 1
#if defined(_DEBUG) && defined(GL_ERROR_CHECKING)
	namespace GL{
	/*	#define GL_INVALID_ENUM                   0x0500
		#define GL_INVALID_VALUE                  0x0501
		#define GL_INVALID_OPERATION              0x0502
		#define GL_STACK_OVERFLOW                 0x0503
		#define GL_STACK_UNDERFLOW                0x0504
		#define GL_OUT_OF_MEMORY                  0x0505 */
		extern GLenum __last_gl_error;
	}
	#define OPENGL_ERROR_CHECK assert((GL::__last_gl_error = glGetError()) == GL_NO_ERROR);
#else
	#define OPENGL_ERROR_CHECK
#endif

#define BUFFER_OFFSET(offset) ((char*)0 + (offset))


namespace GL
{

	enum ObjectType
	{
		OBJ_VERTEX_BUFFER									= GL_ARRAY_BUFFER_ARB,
		OBJ_INDEX_BUFFER									= GL_ELEMENT_ARRAY_BUFFER_ARB,
		OBJ_PIXEL_PACK_BUFFER								= GL_PIXEL_PACK_BUFFER_ARB,
		OBJ_PIXEL_UNPACK_BUFFER								= GL_PIXEL_UNPACK_BUFFER_ARB,
		OBJ_TEXTURE_BUFFER									= GL_TEXTURE_BUFFER_ARB,
		OBJ_UNIFORM_BUFFER									= GL_UNIFORM_BUFFER_EXT,
		OBJ_TRANSFORM_FEEDBACK_BUFFER						= GL_TRANSFORM_FEEDBACK_BUFFER_EXT,
		OBJ_ASM_VERTEX_PROGRAM								= GL_VERTEX_PROGRAM_ARB,
		OBJ_ASM_GEOMETRY_PROGRAM							= GL_GEOMETRY_PROGRAM_NV,
		OBJ_ASM_FRAGMENT_PROGRAM							= GL_FRAGMENT_PROGRAM_ARB,
		OBJ_GLSL_VERTEX_SHADER								= GL_VERTEX_SHADER_ARB,
		OBJ_GLSL_GEOMETRY_SHADER							= GL_GEOMETRY_SHADER_ARB,
		OBJ_GLSL_FRAGMENT_SHADER							= GL_FRAGMENT_SHADER_ARB,
		OBJ_GLSL_PROGRAM									= 0,
		OBJ_TEXTURE_1D										= GL_TEXTURE_1D,
		OBJ_TEXTURE_2D										= GL_TEXTURE_2D,
		OBJ_TEXTURE_3D										= GL_TEXTURE_3D_EXT,
		OBJ_TEXTURE_CUBE									= GL_TEXTURE_CUBE_MAP_ARB,
		OBJ_TEXTURE_1D_ARRAY								= GL_TEXTURE_1D_ARRAY_EXT,
		OBJ_TEXTURE_2D_ARRAY								= GL_TEXTURE_2D_ARRAY_EXT,
		OBJ_TEXTURE_RECTANGLE								= GL_TEXTURE_RECTANGLE_ARB,
		OBJ_DRAW_FRAMEBUFFER								= GL_DRAW_FRAMEBUFFER_EXT,
		OBJ_READ_FRAMEBUFFER								= GL_READ_FRAMEBUFFER_EXT,
		OBJ_RENDERBUFFER									= GL_RENDERBUFFER_EXT,
		OBJ_QUERY_SAMPLES_PASSED							= GL_SAMPLES_PASSED_ARB,
		OBJ_QUERY_PRIMITIVES_GENERATED						= GL_PRIMITIVES_GENERATED_EXT,
		OBJ_QUERY_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN		= GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT,
	};

	enum DataType
	{
		TYPE_VOID							= 0,
		TYPE_UNSIGNED_BYTE					= GL_UNSIGNED_BYTE,
		TYPE_BYTE							= GL_BYTE,
		TYPE_UNSIGNED_SHORT					= GL_UNSIGNED_SHORT,
		TYPE_SHORT							= GL_SHORT,
		TYPE_UNSIGNED_INT					= GL_UNSIGNED_INT,
		TYPE_INT							= GL_INT,
		TYPE_HALF_FLOAT						= GL_HALF_FLOAT_ARB,
		TYPE_FLOAT							= GL_FLOAT,
		TYPE_DOUBLE							= GL_DOUBLE,
		TYPE_UNSIGNED_BYTE_3_3_2			= GL_UNSIGNED_BYTE_3_3_2,
		TYPE_UNSIGNED_BYTE_2_3_2_REV		= GL_UNSIGNED_BYTE_2_3_3_REV,
		TYPE_UNSIGNED_SHORT_5_6_5			= GL_UNSIGNED_SHORT_5_6_5,
		TYPE_UNSIGNED_SHORT_5_6_5_REV		= GL_UNSIGNED_SHORT_5_6_5_REV,
		TYPE_UNSIGNED_SHORT_4_4_4_4			= GL_UNSIGNED_SHORT_4_4_4_4,
		TYPE_UNSIGNED_SHORT_4_4_4_4_REV		= GL_UNSIGNED_SHORT_4_4_4_4_REV,
		TYPE_UNSIGNED_SHORT_5_5_5_1			= GL_UNSIGNED_SHORT_5_5_5_1,
		TYPE_UNSIGNED_SHORT_1_5_5_5_REV		= GL_UNSIGNED_SHORT_1_5_5_5_REV,
		TYPE_UNSIGNED_INT_8_8_8_8			= GL_UNSIGNED_INT_8_8_8_8,
		TYPE_UNSIGNED_INT_8_8_8_8_REV		= GL_UNSIGNED_INT_8_8_8_8_REV,
		TYPE_UNSIGNED_INT_10_10_10_2		= GL_UNSIGNED_INT_10_10_10_2,
		TYPE_UNSIGNED_INT_2_10_10_10_REV	= GL_UNSIGNED_INT_2_10_10_10_REV,
		TYPE_UNSIGNED_INT_24_8				= GL_UNSIGNED_INT_24_8,
		TYPE_UNSIGNED_INT_10F_11F_11F_REV	= GL_UNSIGNED_INT_10F_11F_11F_REV,
		TYPE_UNSIGNED_INT_5_9_9_9_REV		= GL_UNSIGNED_INT_5_9_9_9_REV,
		TYPE_FLOAT_32_UNSIGNED_INT_24_8_REV	= GL_FLOAT_32_UNSIGNED_INT_24_8_REV,
	};

	enum ImageFormat
	{
		IMAGE_FORMAT_DEPTH				= GL_DEPTH_COMPONENT,
		IMAGE_FORMAT_DEPTH_STENCIL		= GL_DEPTH_STENCIL_EXT,
		IMAGE_FORMAT_RED				= GL_RED,
		IMAGE_FORMAT_GREEN				= GL_GREEN,
		IMAGE_FORMAT_BLUE				= GL_BLUE,
		IMAGE_FORMAT_ALPHA				= GL_ALPHA,
		IMAGE_FORMAT_RG					= GL_RG,
		IMAGE_FORMAT_RGB				= GL_RGB,
		IMAGE_FORMAT_RGBA				= GL_RGBA,
		IMAGE_FORMAT_BGR				= GL_BGR_EXT,
		IMAGE_FORMAT_BGRA				= GL_BGRA_EXT,
		IMAGE_FORMAT_LUMINANCE			= GL_LUMINANCE,
		IMAGE_FORMAT_LUMINANCE_ALPHA	= GL_LUMINANCE_ALPHA,
		IMAGE_FORMAT_RED_INTEGER		= GL_RED_INTEGER_EXT,
		IMAGE_FORMAT_GREEN_INTEGER		= GL_GREEN_INTEGER_EXT,
		IMAGE_FORMAT_BLUE_INTEGER		= GL_BLUE_INTEGER_EXT,
		IMAGE_FORMAT_ALPHA_INTEGER		= GL_ALPHA_INTEGER_EXT,
		IMAGE_FORMAT_RG_INTEGER			= GL_RG_INTEGER,
		IMAGE_FORMAT_RGB_INTEGER		= GL_RGB_INTEGER_EXT,
		IMAGE_FORMAT_RGBA_INTEGER		= GL_RGBA_INTEGER_EXT,
		IMAGE_FORMAT_BGR_INTEGER		= GL_BGR_INTEGER_EXT,
		IMAGE_FORMAT_BGRA_INTEGER		= GL_BGRA_INTEGER_EXT,
	};

	enum PixelFormat
	{
		// depricated formats
		PIXEL_FORMAT_LUMINANCE8	= GL_LUMINANCE8,
		PIXEL_FORMAT_ALPHA8		= GL_ALPHA8,

		// integer formats
		PIXEL_FORMAT_R8			= GL_R8,
		PIXEL_FORMAT_R16		= GL_R16,
		PIXEL_FORMAT_RG8		= GL_RG8,
		PIXEL_FORMAT_RG16		= GL_RG16,
		PIXEL_FORMAT_R3_G3_B2	= GL_R3_G3_B2,
		PIXEL_FORMAT_RGB4		= GL_RGB4,
		PIXEL_FORMAT_RGB5		= GL_RGB5,
		PIXEL_FORMAT_RGB8		= GL_RGB8,
		PIXEL_FORMAT_RGB10		= GL_RGB10,
		PIXEL_FORMAT_RGB12		= GL_RGB12,
		PIXEL_FORMAT_RGB16		= GL_RGB16,
		PIXEL_FORMAT_RGBA2		= GL_RGBA2,
		PIXEL_FORMAT_RGBA4		= GL_RGBA4,
		PIXEL_FORMAT_RGB5_A1	= GL_RGB5_A1,
		PIXEL_FORMAT_RGBA8		= GL_RGBA8,
		PIXEL_FORMAT_RGB10_A2	= GL_RGB10_A2,
		PIXEL_FORMAT_RGBA12		= GL_RGBA12,
		PIXEL_FORMAT_RGBA16		= GL_RGBA16,
		PIXEL_FORMAT_SRGB8		= GL_SRGB8_EXT,
		PIXEL_FORMAT_SRGB8_A8	= GL_SRGB8_ALPHA8_EXT,

		// floating point formats
		PIXEL_FORMAT_R16F			= GL_R16F,
		PIXEL_FORMAT_RG16F			= GL_RG16F,
		PIXEL_FORMAT_RGB16F			= GL_RGB16F_ARB,
		PIXEL_FORMAT_RGBA16F		= GL_RGBA16F_ARB,
		PIXEL_FORMAT_R32F			= GL_R32F,
		PIXEL_FORMAT_RG32F			= GL_RG32F,
		PIXEL_FORMAT_RGB32F			= GL_RGB32F_ARB,
		PIXEL_FORMAT_RGBA32F		= GL_RGBA32F_ARB,
		PIXEL_FORMAT_R11F_G11F_B10F	= GL_R11F_G11F_B10F_EXT,
		PIXEL_FORMAT_RGB9_E5		= GL_RGB9_E5_EXT,

		// pure integer formats
		PIXEL_FORMAT_R8I		= GL_R8I,
		PIXEL_FORMAT_R8UI		= GL_R8UI,
		PIXEL_FORMAT_R16I		= GL_R16I,
		PIXEL_FORMAT_R16UI		= GL_R16UI,
		PIXEL_FORMAT_R32I		= GL_R32I,
		PIXEL_FORMAT_R32UI		= GL_R32UI,
		PIXEL_FORMAT_RG8I		= GL_RG8I,
		PIXEL_FORMAT_RG8UI		= GL_RG8UI,
		PIXEL_FORMAT_RG16I		= GL_RG16I,
		PIXEL_FORMAT_RG16UI		= GL_RG16UI,
		PIXEL_FORMAT_RG32I		= GL_RG32I,
		PIXEL_FORMAT_RG32UI		= GL_RG32UI,
		PIXEL_FORMAT_RGB8I		= GL_RGB8I_EXT,
		PIXEL_FORMAT_RGB8UI		= GL_RGB8UI_EXT,
		PIXEL_FORMAT_RGB16I		= GL_RGB16I_EXT,
		PIXEL_FORMAT_RGB16UI	= GL_RGB16UI_EXT,
		PIXEL_FORMAT_RGB32I		= GL_RGB32I_EXT,
		PIXEL_FORMAT_RGB32UI	= GL_RGB32UI_EXT,
		PIXEL_FORMAT_RGBA8I		= GL_RGBA8I_EXT,
		PIXEL_FORMAT_RGBA8UI	= GL_RGBA8UI_EXT,
		PIXEL_FORMAT_RGBA16I	= GL_RGBA16I_EXT,
		PIXEL_FORMAT_RGBA16UI	= GL_RGBA16UI_EXT,
		PIXEL_FORMAT_RGBA32I	= GL_RGBA32I_EXT,
		PIXEL_FORMAT_RGBA32UI	= GL_RGBA32UI_EXT,

		// depth-stencil formats
		PIXEL_FORMAT_DEPTH16			= GL_DEPTH_COMPONENT16_ARB,
		PIXEL_FORMAT_DEPTH24			= GL_DEPTH_COMPONENT24_ARB,
		PIXEL_FORMAT_DEPTH32			= GL_DEPTH_COMPONENT32_ARB,
		PIXEL_FORMAT_DEPTH32F			= GL_DEPTH_COMPONENT32F,
		PIXEL_FORMAT_DEPTH24_STENCIL8	= GL_DEPTH24_STENCIL8_EXT,
		PIXEL_FORMAT_DEPTH32F_STENCIL8	= GL_DEPTH32F_STENCIL8,
		PIXEL_FORMAT_STENCIL1			= GL_STENCIL_INDEX1,
		PIXEL_FORMAT_STENCIL4			= GL_STENCIL_INDEX4,
		PIXEL_FORMAT_STENCIL8			= GL_STENCIL_INDEX8,
		PIXEL_FORMAT_STENCIL16			= GL_STENCIL_INDEX16,

		// compressed formats
		PIXEL_FORMAT_COMPRESSED_R				= GL_COMPRESSED_RED,
		PIXEL_FORMAT_COMPRESSED_RG				= GL_COMPRESSED_RG,
		PIXEL_FORMAT_COMPRESSED_RGB				= GL_COMPRESSED_RGB_ARB,
		PIXEL_FORMAT_COMPRESSED_RGBA			= GL_COMPRESSED_RGBA_ARB,
		PIXEL_FORMAT_COMPRESSED_SRGB			= GL_COMPRESSED_SRGB_EXT,
		PIXEL_FORMAT_COMPRESSED_SRGB_A			= GL_COMPRESSED_SRGB_ALPHA_EXT,
		PIXEL_FORMAT_COMPRESSED_R_RGTC1			= GL_COMPRESSED_RED_RGTC1_EXT,
		PIXEL_FORMAT_COMPRESSED_SIGNED_R_RGTC1	= GL_COMPRESSED_SIGNED_RED_RGTC1_EXT,
		PIXEL_FORMAT_COMPRESSED_RG_RGTC2		= GL_COMPRESSED_RG_RGTC2,
		PIXEL_FORMAT_COMPRESSED_SIGNED_RG_RGTC2	= GL_COMPRESSED_SIGNED_RG_RGTC2,
		PIXEL_FORMAT_COMPRESSED_RGB_DXT1		= GL_COMPRESSED_RGB_S3TC_DXT1_EXT,
		PIXEL_FORMAT_COMPRESSED_RGBA_DXT1		= GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
		PIXEL_FORMAT_COMPRESSED_RGBA_DXT3		= GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,
		PIXEL_FORMAT_COMPRESSED_RGBA_DXT5		= GL_COMPRESSED_RGBA_S3TC_DXT5_EXT,
		PIXEL_FORMAT_COMPRESSED_SRGB_DXT1		= GL_COMPRESSED_SRGB_S3TC_DXT1_EXT,
		PIXEL_FORMAT_COMPRESSED_SRGB_A_DXT1		= GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,
		PIXEL_FORMAT_COMPRESSED_SRGB_A_DXT3		= GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,
		PIXEL_FORMAT_COMPRESSED_SRGB_A_DXT5		= GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT,
	};

	enum CubeFace
	{
		CUBE_FACE_POSITIVE_X	= GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB,
		CUBE_FACE_NEGATIVE_X	= GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB,
		CUBE_FACE_POSITIVE_Y	= GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB,
		CUBE_FACE_NEGATIVE_Y	= GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB,
		CUBE_FACE_POSITIVE_Z	= GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB,
		CUBE_FACE_NEGATIVE_Z	= GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB,
	};

	enum BufferUsage
	{
		USAGE_STREAM_DRAW = GL_STREAM_DRAW_ARB,
        USAGE_STREAM_READ = GL_STREAM_READ_ARB,
        USAGE_STREAM_COPY = GL_STREAM_COPY_ARB,
        USAGE_STATIC_DRAW = GL_STATIC_DRAW_ARB,
        USAGE_STATIC_READ = GL_STATIC_READ_ARB,
        USAGE_STATIC_COPY = GL_STATIC_COPY_ARB,
        USAGE_DYNAMIC_DRAW = GL_DYNAMIC_DRAW_ARB,
        USAGE_DYNAMIC_READ = GL_DYNAMIC_READ_ARB,
        USAGE_DYNAMIC_COPY = GL_DYNAMIC_COPY_ARB,
	};

	enum BufferAccess
	{
		ACCESS_READ_ONLY = GL_READ_ONLY_ARB,
        ACCESS_WRITE_ONLY = GL_WRITE_ONLY_ARB,
        ACCESS_READ_WRITE = GL_READ_WRITE_ARB,
	};

	enum BufferMapFlags
	{
		MAP_READ_BIT					= GL_MAP_READ_BIT,
		MAP_WRITE_BIT					= GL_MAP_WRITE_BIT,
		MAP_INVALIDATE_RANGE_BIT		= GL_MAP_INVALIDATE_RANGE_BIT,	// cannot be used with MAP_READ_BIT
		MAP_INVALIDATE_BUFFER_BIT		= GL_MAP_INVALIDATE_BUFFER_BIT,	// cannot be used with MAP_READ_BIT
		MAP_FLUSH_EXPLICIT_BIT			= GL_MAP_FLUSH_EXPLICIT_BIT,	// must be used with MAP_WRITE_BIT
		MAP_UNSYNCHRONIZED_BIT			= GL_MAP_UNSYNCHRONIZED_BIT,
	};

	enum RenderbufferType
	{
		// for default framebuffer
		BUFFER_NONE				= GL_NONE,
		BUFFER_FRONT_LEFT		= GL_FRONT_LEFT,
		BUFFER_FRONT_RIGHT		= GL_FRONT_RIGHT,
		BUFFER_BACK_LEFT		= GL_BACK_LEFT,
		BUFFER_BACK_RIGHT		= GL_BACK_RIGHT,

		// for offscreen render targets
		BUFFER_COLOR0			= GL_COLOR_ATTACHMENT0_EXT,
		BUFFER_COLOR1			= GL_COLOR_ATTACHMENT1_EXT,
		BUFFER_COLOR2			= GL_COLOR_ATTACHMENT2_EXT,
		BUFFER_COLOR3			= GL_COLOR_ATTACHMENT3_EXT,
		BUFFER_COLOR4			= GL_COLOR_ATTACHMENT4_EXT,
		BUFFER_COLOR5			= GL_COLOR_ATTACHMENT5_EXT,
		BUFFER_COLOR6			= GL_COLOR_ATTACHMENT6_EXT,
		BUFFER_COLOR7			= GL_COLOR_ATTACHMENT7_EXT,
		BUFFER_COLOR8			= GL_COLOR_ATTACHMENT8_EXT,
		BUFFER_COLOR9			= GL_COLOR_ATTACHMENT9_EXT,
		BUFFER_COLOR10			= GL_COLOR_ATTACHMENT10_EXT,
		BUFFER_COLOR11			= GL_COLOR_ATTACHMENT11_EXT,
		BUFFER_COLOR12			= GL_COLOR_ATTACHMENT12_EXT,
		BUFFER_COLOR13			= GL_COLOR_ATTACHMENT13_EXT,
		BUFFER_COLOR14			= GL_COLOR_ATTACHMENT14_EXT,
		BUFFER_COLOR15			= GL_COLOR_ATTACHMENT15_EXT,
		BUFFER_DEPTH			= GL_DEPTH_ATTACHMENT_EXT,
		BUFFER_STENCIL			= GL_STENCIL_ATTACHMENT_EXT,
		BUFFER_DEPTH_STENCIL	= GL_DEPTH_STENCIL_ATTACHMENT,
	};

	enum RenderbufferBit
	{
		COLOR_BUFFER_BIT	= GL_COLOR_BUFFER_BIT,
		DEPTH_BUFFER_BIT	= GL_DEPTH_BUFFER_BIT,
		STENCIL_BUFFER_BIT	= GL_STENCIL_BUFFER_BIT
	};

	enum PolygonFace
	{
		FACE_FRONT			= GL_FRONT,
		FACE_BACK			= GL_BACK,
		FACE_FRONT_AND_BACK	= GL_FRONT_AND_BACK,
	};

	enum PrimitiveType
	{
		PRIM_POINTS						= GL_POINTS,
		PRIM_LINES						= GL_LINES,
		PRIM_LINES_ADJACENCY			= GL_LINES_ADJACENCY_EXT,
		PRIM_LINE_STRIP					= GL_LINE_STRIP,
		PRIM_LINE_STRIP_ADJACENCY		= GL_LINE_STRIP_ADJACENCY_EXT,
		PRIM_LINE_LOOP					= GL_LINE_LOOP,
		PRIM_TRIANGLES					= GL_TRIANGLES,
		PRIM_TRIANGLES_ADJACENCY		= GL_TRIANGLES_ADJACENCY_EXT,
		PRIM_TRIANGLE_STRIP				= GL_TRIANGLE_STRIP,
		PRIM_TRIANGLE_STRIP_ADJACENCY	= GL_TRIANGLE_STRIP_ADJACENCY_EXT,
		PRIM_TRIANGLE_FAN				= GL_TRIANGLE_FAN,
	};

	enum RasterMode
	{
		RASTER_POINT	= GL_POINT,
		RASTER_LINE		= GL_LINE,
		RASTER_FILL		= GL_FILL,
	};

	enum VertexOrient
	{
		ORIENT_CW	= GL_CW,
		ORIENT_CCW	= GL_CCW,
	};

	enum CompareFunc
	{
		FUNC_NEVER		= GL_NEVER,
		FUNC_LESS		= GL_LESS,
		FUNC_EQUAL		= GL_EQUAL,
		FUNC_LEQUAL		= GL_LEQUAL,
		FUNC_GREATER	= GL_GREATER,
		FUNC_NOTEQUAL	= GL_NOTEQUAL,
		FUNC_GEQUAL		= GL_GEQUAL,
		FUNC_ALWAYS		= GL_ALWAYS,
	};

	enum StencilOp
	{
		STENCIL_OP_KEEP			= GL_KEEP,
		STENCIL_OP_ZERO			= GL_ZERO,
		STENCIL_OP_REPLACE		= GL_REPLACE,
		STENCIL_OP_INCR			= GL_INCR,
		STENCIL_OP_INCR_WRAP	= GL_INCR_WRAP,
		STENCIL_OP_DECR			= GL_DECR,
		STENCIL_OP_DECR_WRAP	= GL_DECR_WRAP,
		STENCIL_OP_INVERT		= GL_INVERT,
	};

	enum BlendOp
	{
		BLEND_OP_ADD				= GL_FUNC_ADD,
		BLEND_OP_SUBTRACT			= GL_FUNC_SUBTRACT,
		BLEND_OP_REVERSE_SUBTRACT	= GL_FUNC_REVERSE_SUBTRACT,
		BLEND_OP_MIN				= GL_MIN,
		BLEND_OP_MAX				= GL_MAX,
	};

	enum BlendFunc
	{
		BLEND_FUNC_ZERO						= GL_ZERO,
		BLEND_FUNC_ONE						= GL_ONE,
		BLEND_FUNC_SRC_COLOR				= GL_SRC_COLOR,
		BLEND_FUNC_ONE_MINUS_SRC_COLOR		= GL_ONE_MINUS_SRC_COLOR,
		BLEND_FUNC_DST_COLOR				= GL_DST_COLOR,
		BLEND_FUNC_ONE_MINUS_DST_COLOR		= GL_ONE_MINUS_DST_COLOR,
		BLEND_FUNC_SRC_ALPHA				= GL_SRC_ALPHA,
		BLEND_FUNC_ONE_MINUS_SRC_ALPHA		= GL_ONE_MINUS_SRC_ALPHA,
		BLEND_FUNC_DST_ALPHA				= GL_DST_ALPHA,
		BLEND_FUNC_ONE_MINUS_DST_ALPHA		= GL_ONE_MINUS_DST_ALPHA,
		BLEND_FUNC_CONSTANT_COLOR			= GL_CONSTANT_COLOR,
		BLEND_FUNC_ONE_MINUS_CONSTANT_COLOR	= GL_ONE_MINUS_CONSTANT_COLOR,
		BLEND_FUNC_CONSTANT_ALPHA			= GL_CONSTANT_ALPHA,
		BLEND_FUNC_ONE_MINUS_CONSTANT_ALPHA	= GL_ONE_MINUS_CONSTANT_ALPHA,
		BLEND_FUNC_SRC_ALPHA_SATURATE		= GL_SRC_ALPHA_SATURATE,
	};

	enum ClampValue
	{
		CLAMP_OFF			= GL_FALSE,
		CLAMP_ON			= GL_TRUE,
		CLAMP_FIXED_ONLY	= GL_FIXED_ONLY_ARB,
	};

	enum ClampTarget
	{
		CLAMP_VERTEX_COLOR		= GL_CLAMP_VERTEX_COLOR_ARB,
		CLAMP_FRAGMENT_COLOR	= GL_CLAMP_FRAGMENT_COLOR_ARB,
		CLAMP_READ_COLOR		= GL_CLAMP_READ_COLOR_ARB,
	};

	enum LogicOp
	{
		LOGIC_OP_CLEAR			= GL_CLEAR,
		LOGIC_OP_AND			= GL_AND,
		LOGIC_OP_AND_REVERSE	= GL_AND_REVERSE,
		LOGIC_OP_COPY			= GL_COPY,
		LOGIC_OP_AND_INVERTED	= GL_AND_INVERTED,
		LOGIC_OP_NOOP			= GL_NOOP,
		LOGIC_OP_XOR			= GL_XOR,
		LOGIC_OP_OR				= GL_OR,
		LOGIC_OP_NOR			= GL_NOR,
		LOGIC_OP_EQUIV			= GL_EQUIV,
		LOGIC_OP_INVERT			= GL_INVERT,
		LOGIC_OP_OR_REVERSE		= GL_OR_REVERSE,
		LOGIC_OP_COPY_INVERTED	= GL_COPY_INVERTED,
		LOGIC_OP_OR_INVERTED	= GL_OR_INVERTED,
		LOGIC_OP_NAND			= GL_NAND,
		LOGIC_OP_SET			= GL_SET,
	};

	enum TexAddressMode
	{
		TEX_ADDRESS_CLAMP_TO_BORDER	= GL_CLAMP_TO_BORDER,
		TEX_ADDRESS_CLAMP_TO_EDGE	= GL_CLAMP_TO_EDGE,
		TEX_ADDRESS_REPEAT			= GL_REPEAT,
		TEX_ADDRESS_MIRRORED_REPEAT	= GL_MIRRORED_REPEAT,
	};

	enum TexFilter
	{
		TEX_FILTER_NEAREST					= GL_NEAREST,
		TEX_FILTER_LINEAR					= GL_LINEAR,
		TEX_FILTER_NEAREST_MIPMAP_NEAREST	= GL_NEAREST_MIPMAP_NEAREST,
		TEX_FILTER_NEAREST_MIPMAP_LINEAR	= GL_NEAREST_MIPMAP_LINEAR,
		TEX_FILTER_LINEAR_MIPMAP_NEAREST	= GL_LINEAR_MIPMAP_NEAREST,
		TEX_FILTER_LINEAR_MIPMAP_LINEAR		= GL_LINEAR_MIPMAP_LINEAR,
	};

	enum DepthTexMode // depricated, always red
	{
		DEPTH_TEX_RED			= GL_RED,
		DEPTH_TEX_LUMINANCE		= GL_LUMINANCE,
		DEPTH_TEX_INTENSITY		= GL_INTENSITY,
		DEPTH_TEX_ALPHA			= GL_ALPHA,
	};

	enum TexCompareMode
	{
		DEPTH_CMP_NONE				= GL_NONE,
		DEPTH_CMP_REF_TO_TEXTURE	= GL_COMPARE_REF_TO_TEXTURE,
	};

	enum FramebufferStatus
	{
		FBUF_STATUS_COMPLETE									= GL_FRAMEBUFFER_COMPLETE_EXT,
		FBUF_STATUS_INCOMPLETE_ATTACHMENT						= GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT,
		FBUF_STATUS_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT	= GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT,
		FBUF_STATUS_INCOMPLETE_DRAW_BUFFER						= GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT,
		FBUF_STATUS_INCOMPLETE_READ_BUFFER						= GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT,
		FBUF_STATUS_FRAMEBUFFER_UNSUPORTED						= GL_FRAMEBUFFER_UNSUPPORTED_EXT,
		FBUF_STATUS_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE			= GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT,
		FBUF_STATUS_FRAMEBUFFER_UNDEFINED						= GL_FRAMEBUFFER_UNDEFINED,
	};

	enum SwapMethod
	{
		SWAP_EXCHANGE	= WGL_SWAP_EXCHANGE_ARB,
		SWAP_COPY		= WGL_SWAP_COPY_ARB,
		SWAP_UNDIFINED	= WGL_SWAP_UNDEFINED_ARB,
	};

	enum ColorBufferType
	{
		COLOR_RGBA			= WGL_TYPE_RGBA_ARB,
		COLOR_RGBA_FLOAT	= WGL_TYPE_RGBA_FLOAT_ARB,
	};

	enum ProgramParam
	{
		PROG_PARAM_GEOMETRY_VERT_OUT		= GL_GEOMETRY_VERTICES_OUT_ARB,
		PROG_PARAM_GEOMETRY_INPUT_TYPE		= GL_GEOMETRY_INPUT_TYPE_ARB,
		PROG_PARAM_GEOMETRY_OUTPUT_TYPE		= GL_GEOMETRY_OUTPUT_TYPE_ARB,
	};

	enum CondRenderMode
	{
		COND_RENDER_QUERY_WAIT				= GL_QUERY_WAIT,
		COND_RENDER_QUERY_NO_WAIT			= GL_QUERY_NO_WAIT,
		COND_RENDER_QUERY_BY_REGION_WAIT	= GL_QUERY_BY_REGION_WAIT,
		COND_RENDER_QUERY_BY_REGION_NO_WAIT	= GL_QUERY_BY_REGION_NO_WAIT,
	};

	enum TFBufferMode
	{
		TF_BUFFER_MODE_INTERLEAVED_ATTRIBS		= GL_INTERLEAVED_ATTRIBS,
		TF_BUFFER_MODE_SEPARATE_ATTRIBS			= GL_SEPARATE_ATTRIBS,
	};


	struct PixelStore
	{
		bool swapBytes;
		bool LSBFirst;
		int rowLength;
		int skipRows;
		int skipPixels;
		int alignment;
		int imageHeight;
		int skipImages;
	};

	struct SamplerStateDesc;

	struct GLState
	{
		// buffer objects
		GLuint vertexBuf;
		GLuint indexBuf;
		GLuint pixelPackBuf;
		GLuint pixelUnpackBuf;
		GLuint textureBuf;
		GLuint uniformBuf;
		GLuint transfFeedbackBuf;

		// textures
		GLuint tex1D;
		GLuint tex2D;
		GLuint tex3D;
		GLuint texCube;
		GLuint tex1DArray;
		GLuint tex2DArray;
		GLuint texBuffer;
		GLuint texRect;
		GLuint* samplers;

		// ASM programs
		GLuint asmVertProg;
		GLuint asmGeomProg;
		GLuint asmFragProg;

		// GLSL
		GLuint glslProg;

		// framebuffer
		GLuint drawFbuf;
		GLuint readFbuf;

		// renderbuffer
		GLuint renderbuffer;

		// pixel store
		PixelStore pixelStorePack;
		PixelStore pixelStoreUnpack;

		// default state of immutable objects
		static BASELIB_API const PixelStore defaultPixelStore;
		static BASELIB_API const SamplerStateDesc defaultSamplerState;
	};

}

#endif // _GLCOMMON_H_
