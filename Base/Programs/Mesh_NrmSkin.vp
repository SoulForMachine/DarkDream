!!ARBvp1.0

ATTRIB		vertPos = vertex.attrib[0];
ATTRIB		vertNormal = vertex.attrib[1];
ATTRIB		vertTangent = vertex.attrib[2];
ATTRIB		vertUV = vertex.attrib[3];
ATTRIB		vertSkin = vertex.attrib[4]; # x, y - weights; z, w - indices

PARAM		worldMat[] = { program.local[0..3] };
PARAM		viewProjMat[] = { program.local[4..7] };
PARAM		camPos = program.local[8];
PARAM		skinMatPalette[] = { program.local[9..254] }; # 82 matrices max

ADDRESS		index1, index2;

OUTPUT		varPos = result.position;
OUTPUT		varUV = result.texcoord[0];
OUTPUT		varLightVec = result.texcoord[1]; # tangent space

TEMP		r0, r1, worldPos, binormal, lvec;


MUL			r0, vertSkin.zwxx, 3.0;
ARL			index1.x, r0.x;
ARL			index2.x, r0.y;

DP4			r0.x, skinMatPalette[index1.x], vertPos;
DP4			r0.y, skinMatPalette[index1.x + 1], vertPos;
DP4			r0.z, skinMatPalette[index1.x + 2], vertPos;
MUL			r0, r0, vertSkin.x;

DP4			r1.x, skinMatPalette[index2.x], vertPos;
DP4			r1.y, skinMatPalette[index2.x + 1], vertPos;
DP4			r1.z, skinMatPalette[index2.x + 2], vertPos;
MAD			r1, r1, vertSkin.y, r0;
MOV			r1.w, 1.0;

# world space vertex position
DP4			worldPos.x, worldMat[0], r1;
DP4			worldPos.y, worldMat[1], r1;
DP4			worldPos.z, worldMat[2], r1;
DP4			worldPos.w, worldMat[3], r1;

# clip space vertex position
DP4			varPos.x, viewProjMat[0], worldPos;
DP4			varPos.y, viewProjMat[1], worldPos;
DP4			varPos.z, viewProjMat[2], worldPos;
DP4			varPos.w, viewProjMat[3], worldPos;

# output UV
MOV			varUV, vertUV;

# world space light vector (same as negative view vector)
SUB			r0, worldPos, camPos;

# object space light vector
MUL			lvec, worldMat[0], r0.x;
MAD			lvec, worldMat[1], r0.y, lvec;
MAD			lvec, worldMat[2], r0.z, lvec;

# bind space light vector
MUL			r0, skinMatPalette[index1.x], lvec.x;
MAD			r0, skinMatPalette[index1.x + 1], lvec.y, r0;
MAD			r0, skinMatPalette[index1.x + 2], lvec.z, r0;
MUL			r0, r0, vertSkin.x;

MUL			r1, skinMatPalette[index2.x], lvec.x;
MAD			r1, skinMatPalette[index2.x + 1], lvec.y, r1;
MAD			r1, skinMatPalette[index2.x + 2], lvec.z, r1;
MAD			lvec, r1, vertSkin.y, r0;

# tangent space light vector
XPD			binormal, vertNormal, vertTangent;
MUL			binormal, binormal, vertTangent.w;
DP3			varLightVec.x, lvec, vertTangent;
DP3			varLightVec.y, lvec, binormal;
DP3			varLightVec.z, lvec, vertNormal;


END
